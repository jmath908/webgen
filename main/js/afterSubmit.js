/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Div/SVG Manipulation (below) ////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Function to append div elemnts to an HTML document with an existing div element with id='oldDivID'.
// Useful for when you have a variable amount of plots to display on the page:
addDiv = function(newDivID, oldDivID) { 
  // create a new div element 
  let newDiv = document.createElement("div"); 
  newDiv.setAttribute('id',newDivID);
  newDiv.setAttribute("style","margin-top:25px"); 
  // add the newly created element and its content into the DOM 
  document.getElementById(oldDivID).after(newDiv); 
}

// Function to remove the current div elements if they exist:
removeDiv = function() {
  let i = 1;
  let continueBool = true;
  while (continueBool == true) {
    divToRemove = document.getElementById("div" + i);
    if(divToRemove) {
      $(divToRemove).remove();
      i++;
    } else {
      continueBool = false;
    }
  }
}

// Function to remove the current svg elements if they exist:
removeSVGelements = function() {
  svgElementsArray = ["svgHeatMap", "svgViolinPlot"];
  for(let i = 0; i < svgElementsArray.length; i++) {
    svgToRemove = document.getElementById(svgElementsArray[i]);

    if (svgToRemove)
      $(svgToRemove).remove();
    else {
      let ctr = 0
      for (;;) {
        svgToRemove = document.getElementById(svgElementsArray[i] + ctr++)
        if (svgToRemove)
          $(svgToRemove).remove();
        else
          break;  
      }
    }  
  }
}

// Function to remove the tooltip div elements if they exist:
removeTooltipElements = function () {
  let collection = document.getElementsByClassName('tooltip');
  for (let i = 0, len = collection.length || 0; i < len; i = i + 1) {
    collection[0].remove();
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Div/SVG Manipulation (above) ////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                                               //                                                                        //

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Set Values for Example Button (below) ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Setting the cohort and gene list examples if the user clicks the use example button:
function setExampleVars() {
  // Select example values:
  $('.cancerTypeMultipleSelection').val(['PAAD']);
  $('.geneOneMultipleSelection').val(['ethnicity', 'KRAS', 'EGFR', 'TP53']);

  // Trigger the change:
  $('.cancerTypeMultipleSelection').trigger('change');
  $('.geneOneMultipleSelection').trigger('change');
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Set Values for Example Button (above) ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//                                                               //                                                                        //

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Build Plots on Page (below) /////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// The JS code for building the plots to display:
// Wait for user input to build plots:

let buildPlots = async function() {
  
  // Reset page formatting:
  document.getElementById('heatmapDiv0').innerHTML = "";
  document.getElementById('svgViolinDiv0').innerHTML = "";
  
  // Remove existing div and svg elements if they're there:
  removeDiv();
  removeSVGelements();
  removeTooltipElements();

  // Display loader:
  document.getElementById('heatmapDiv0').className = 'loader';                       // Create the loader.
  document.getElementById('svgViolinDiv0').className = 'loader';                     // Create the loader.

  let cohortQuery = $('.cancerTypeMultipleSelection').select2('data').map(
                    cohortInfo => cohortInfo.text.match(/\(([^)]+)\)/)[1]);
  let geneQuery = $('.geneTwoMultipleSelection').select2('data').map(
                    gene => gene.text);

  // Fetch RNA sequence data for selected cancer type(s) and gene(s)
  let expressionData = await getExpressionDataJSONarray_cg(cohortQuery, geneQuery);

  // Fetch clinical data for cohort and specified clinical fields (temporarily hard-coded)
  let clinicalQuery = ["gender", "race", "vital_status", "histological_type", "tumor_tissue_site"];
  let clinicalData = await getClinicalDataJSONarray_cc(cohortQuery, clinicalQuery);

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  let data = await getDataFromSelectedPieSectors(expressionData);
  //Add expression data as a field in localStorage
  localStorage.setItem("expressionData", JSON.stringify(data));

  buildHeatmap(data, clinicalData);
  buildViolinPlot(cohortQuery, data);

};

buildHeatmap = async function(expData, clinData){
  // Remove the loader
  document.getElementById('heatmapDiv0').classList.remove('loader');

  // Create div object for heatmap and clear
  let divHeatMap = d3.select('#heatmapDiv0').html("");

  // Create the heatmap
  createHeatmap(expData, clinData, divHeatMap);

};

buildViolinPlot = async function(cohortQuery, data){

  // Remove the loader
  document.getElementById('svgViolinDiv0').classList.remove('loader');               

  // Set up the figure dimensions:
  let margin = {top: 80, right: 30, bottom: 30, left: 60},
  width = 1250 - margin.left - margin.right,
  height = 500 - margin.top - margin.bottom;

  // Appending multiple g elements to svg object for violin plot
  let myCohorts = d3.map(data, function(d){return d.cohort;}).keys();

  // Define the number of cohorts to create a plot for
  let numCohorts = myCohorts.length;

  // Spacing between plots
  let ySpacing = margin.top;

  // Append an svg object for each cohort to create a violin plot for
  for(var index = 0; index < numCohorts; index++) {
    
    // Define the current cohort to create the violin plot for
    let curCohort = myCohorts[index];

    let svgViolinPlot = d3.select("#violinPlotRef").append("svg")
      .attr("viewBox", `0 0 1250 500`)  // This line makes the svg responsive
      .attr("id", `svgViolinPlot${index}`)
      .append("g")
      .attr("transform",
          "translate(" + (margin.left-20) + "," + 
                      (margin.top + ySpacing*index*0.25) + ")");

    // Create the violin plot:
    createViolinPlot('cohort', cohortQuery, data, svgViolinPlot, curCohort);
  }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Build Plots on Page (above) /////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////